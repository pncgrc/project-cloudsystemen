name: Docker Compose Deploy

on:
  push:
    branches:
      - main  # Replace with your target branch if needed

jobs:
  checkout-code:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

  setup-files:
    needs: checkout-code
    runs-on: ubuntu-latest
    steps:
      - name: Setup SSH Key and Known Hosts
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          KNOWN_HOSTS: ${{ secrets.KNOWN_HOSTS }}
        run: |
          # Setup SSH directory
          mkdir -p ~/.ssh
          
          # Ensure the private key is properly written to a file
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          cat ~/.ssh/id_rsa  # Debugging: Ensure the private key is correctly saved
          chmod 600 ~/.ssh/id_rsa
          
          # Write known hosts (for avoiding SSH prompts)
          echo "$KNOWN_HOSTS" > ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

  deploy:
    needs: setup-files
    runs-on: ubuntu-latest
    steps:
      - name: Deploy with Docker Compose
        env:
          HOST: ${{ secrets.HOST }}  # Ensure this is in the format user@host
        run: |
          # Ensure the private key has the correct permissions
          chmod 600 ~/.ssh/id_rsa  # Ensure the private key is accessible
          
          # Debugging: Check if the private key is there
          ls -l ~/.ssh  # List the files in the .ssh directory
          cat ~/.ssh/id_rsa  # Display the private key (only for debugging, make sure to remove this step after verifying)
          
          # Run SSH commands
          ssh -i ~/.ssh/id_rsa $HOST << 'EOF'
            cd project-cloudsystemen/  # Adjust the path
            git pull origin main  # Pull latest changes
            docker compose down  # Stop existing containers
            docker compose up -d  # Start updated containers
          EOF
